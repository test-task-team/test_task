AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AWS CloudFormation Template For Continuous Delivery: This template
  builds an AWS CodePipeline pipeline that implements a continuous delivery release
  process for AWS CloudFormation stacks. 
Parameters:
  PipelineName:
    Description: A name for pipeline
    Type: String
    Default: checkout-api-pipeline
  ArtifactStoreBucket:
    Description: S3 Bucket Name
    Type: String
    Default: athena-build-archive
  RepoName:
    Description: Repo Name
    Type: String
    Default: checkout-api
  BranchName:
    Description: Branch Name
    Type: String
    Default: master
  DevAccount:
    Description: AWS AccountNumber for dev
    Type: String
    Default: 053575238526
  TestAccount:
    Description: AWS AccountNumber for test. Leave unspecified if you are not having dedicated test account.
    Type: String
    Default: unspecified
  ProductionAccount:
    Description: AWS AccountNumber for production
    Type: String
    Default: 647677418029
  DevStackName:
    Default: dev-checkout-api
    Description: A name for the dev cehckout api stack
    Type: String
  DevStackConfig:
    Default: dev.json
    Description: The configuration file name for the dev checkout api
    Type: String
  ProdStackName:
    Default: prod-checkout-api
    Description: A name for the production cehckout api
    Type: String
  ProdStackConfig:
    Default: prod.json
    Description: The configuration file name for the production cehckout api
    Type: String
  ChangeSetName:
    Default: checkout-api-changeset
    Description: A name for the checkout 
    Type: String
  TemplateFileName:
    Description: Transformed SAM Template file name
    Type: String
    Default: outputSamTemplate.yaml
  CMKARN:
    Description: ARN of the KMS CMK creates in Tools account
    Type: String
    Default: arn:aws:kms:us-west-2:647677418029:key/aaa88bc4-08c5-4187-8bd7-f3fc1a1e957e
  ParamStoreKMSKeyId:
    Description: ID of the KMS key which used to encrypt the Airbrake Params
    Type: String
    Default: 1ca1b9a1-618d-48ba-9246-86e6286cd756
  ParamStoreLayerARN:
    Description: ARN of the ParamsStore Layer
    Type: String
    Default: arn:aws:lambda:us-west-2:647677418029:layer:ProdPythonParamStore:2
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "CodePipeline Settings"
        Parameters:
          - PipelineName
          - S3Bucket
      - Label:
          default: "Test Stack Settings"
        Parameters:
          - TestStackName
          - TemplateFileName
          - TestStackConfig
      - Label:
          default: "Production Stack Settings"
        Parameters:
          - ChangeSetName
          - ProdStackName
          - ProdStackConfig
Resources:
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: CODEPIPELINE
      EncryptionKey: !Ref CMKARN
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/ubuntu-base:14.04
        EnvironmentVariables:
          - Name: S3_BUCKET
            Value: !Ref ArtifactStoreBucket
          - Name: KMSKey
            Value: !Ref CMKARN 
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 10
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns: arn:aws:iam::aws:policy/AWSCodeCommitReadOnly
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'logs:*'
                - 's3:*'
                - 'ssm:*'
                Effect: Allow
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - kms:*
                Resource: !Ref CMKARN
  CodePipelineSNSTopic:
    Type: AWS::SNS::Topic
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Location: !Ref 'ArtifactStoreBucket'
        Type: S3
        EncryptionKey:
          Id: !Ref CMKARN
          Type: KMS
      DisableInboundStageTransitions: []
      Name: !Ref 'PipelineName'
      RoleArn: !GetAtt [PipelineRole, Arn]
      Stages:
        - Name: Source
          Actions:
            - Name: TemplateSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: '1'
              Configuration:
                RepositoryName: !Ref RepoName
                BranchName: !Ref BranchName
              OutputArtifacts:
                - Name: TemplateSource
              RunOrder: '1'
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: TemplateSource
              OutputArtifacts:
                - Name: BuildArtifact
              RunOrder: '1'
        - Name: DevStage
          Actions:
            - Name: CreateStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                RoleArn: !Sub arn:aws:iam::${DevAccount}:role/cloudformationdeployer-role
                StackName: !Ref DevStackName
                TemplateConfiguration: !Sub "BuildArtifact::${DevStackConfig}"
                TemplatePath: !Sub "BuildArtifact::${TemplateFileName}"
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND
              RunOrder: '1'
              RoleArn: !Sub arn:aws:iam::${DevAccount}:role/ToolsAcctCodePipelineCloudFormationRole
            - Name: AirBrakeDeploy
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                FunctionName: !Ref AirBrakeDeployHandler
                UserParameters: !Sub "{'TargetStage':'dev','Name':'version.txt'}"
              RunOrder: '2'
        - Name: ProdStage
          Actions:
            - Name: CreateChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                RoleArn: !GetAtt [CFNRole, Arn]
                StackName: !Ref ProdStackName
                ChangeSetName: !Ref ChangeSetName
                TemplateConfiguration: !Sub "BuildArtifact::${ProdStackConfig}"
                TemplatePath: !Sub "BuildArtifact::${TemplateFileName}"
                Capabilities: CAPABILITY_IAM
              RunOrder: '1'
            - Name: ApproveChangeSet
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              Configuration:
                NotificationArn: !Ref CodePipelineSNSTopic
                CustomData: !Sub 'A new change set was created for the ${ProdStackName} stack. Do you want to implement the changes?'
              RunOrder: '2'
            - Name: ExecuteChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              OutputArtifacts:
                - Name: ProdStageOutput
              Configuration:
                RoleArn: !GetAtt [CFNRole, Arn]
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Ref ChangeSetName
                StackName: !Ref ProdStackName
                Capabilities: CAPABILITY_IAM
                OutputFileName: ProdStageOutput.json
              RunOrder: '3'
            - Name: AirBrakeDeploy
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                FunctionName: !Ref AirBrakeDeployHandler
                UserParameters: !Sub "{'TargetStage':'prod','Name':'version.txt'}"
              RunOrder: '4'
  CFNRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [cloudformation.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CloudFormationRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - s3:GetObject
                - s3:GetObjectVersion
                - s3:GetBucketVersioning
                Resource: "*"
                Effect: Allow
              - Action:
                - s3:PutObject
                Resource:
                - !Sub "arn:aws:s3:::${ArtifactStoreBucket}*"
                Effect: Allow
              - Action:
                - lambda:*
                - cognito-idp:*
                - cognito-identity:*
                - dynamodb:*
                - cloudwatch:*
                Resource: "*"
                Effect: Allow
              - Action:
                - apigateway:*
                Resource:
                - !Sub arn:aws:apigateway:${AWS::Region}::*
                Effect: Allow
              - Action:
                - iam:GetRole
                - iam:CreateRole
                - iam:DeleteRole
                - iam:PutRolePolicy
                Resource:
                - !Sub arn:aws:iam::${AWS::AccountId}:role/*
                Effect: Allow
              - Action:
                - iam:AttachRolePolicy
                - iam:DeleteRolePolicy
                - iam:DetachRolePolicy
                Resource:
                - !Sub arn:aws:iam::${AWS::AccountId}:role/*
                Effect: Allow
              - Action:
                - iam:PassRole
                Resource:
                - "*"
                Effect: Allow
              - Action:
                - cloudformation:CreateChangeSet
                Resource: "*"
                Effect: Allow
              - Action:
                - codedeploy:CreateApplication
                - codedeploy:DeleteApplication
                - codedeploy:RegisterApplicationRevision
                Resource:
                - !Sub arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:application:*
                Effect: Allow
              - Action:
                - codedeploy:CreateDeploymentGroup
                - codedeploy:CreateDeployment
                - codedeploy:GetDeployment
                Resource:
                - !Sub arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:*
                Effect: Allow
              - Action:
                - codedeploy:GetDeploymentConfig
                Resource:
                - !Sub arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentconfig:*
                Effect: Allow

  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codepipeline.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'cloudformation:CreateStack'
                - 'cloudformation:DescribeStacks'
                - 'cloudformation:DeleteStack'
                - 'cloudformation:UpdateStack'
                - 'cloudformation:CreateChangeSet'
                - 'cloudformation:ExecuteChangeSet'
                - 'cloudformation:DeleteChangeSet'
                - 'cloudformation:DescribeChangeSet'
                - 'cloudformation:SetStackPolicy'
                - 'lambda:*'
                - 'iam:PassRole'
                - 'sts:AssumeRole'
                - 'sns:Publish'
                - 'codecommit:*'
                - 'codebuild:*'
                Effect: Allow
                Resource: '*'
              -
                Effect: Allow
                Action:
                  - kms:*
                Resource: !Ref CMKARN
              - Action:
                - s3:GetObject
                - s3:GetObjectVersion
                - s3:GetBucketVersioning
                Resource: "*"
                Effect: Allow
              - Action:
                - s3:PutObject
                Resource:
                - !Sub "arn:aws:s3:::${ArtifactStoreBucket}*"
                Effect: Allow
  AirBrakeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - codepipeline:PutJobFailureResult
                - codepipeline:PutJobSuccessResult
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - kms:Decrypt
                - ssm:GetParameters
                Effect: Allow
                Resource: '*'
              - Action:
                - kms:Decrypt
                Effect: Allow
                Resource: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${ParamStoreKMSKeyId}"
  AirBrakeDeployHandler: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Handler: "AirBrakeDeploy.lambda_handler"
      Role: !GetAtt [AirBrakeDeployRole, Arn]
      Code: airbrake_deploy/
      Runtime: python3.6
      Timeout: 180
      Layers:
        - !Ref ParamStoreLayerARN
      Environment:
        Variables:
          PARAM_STORE_AIRBRAKE_PROJECT_ID_CHECKOUTAPI: NA
          PARAM_STORE_AIRBRAKE_API_KEY_CHECKOUTAPI: NA
          REPO_URL: https://console.aws.amazon.com/codesuite/codecommit/repositories/checkout-api/commit/
